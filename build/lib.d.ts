import Discord from 'fosscord.js';
import InstanceClientUtil from "./Instances/InstanceClientUtil";
export declare class Client extends Discord.Client {
    instanced: InstanceClientUtil | null;
}
declare const _default: {
    Client: typeof Client;
    PartialTextBasedChannel<T>(Base?: Discord.Constructable<T> | undefined): Discord.Constructable<T & Discord.PartialTextBasedChannelFields>;
    TextBasedChannel<T_1, I extends keyof Discord.TextBasedChannelFields = never>(Base?: Discord.Constructable<T_1> | undefined, ignore?: I[] | undefined): Discord.Constructable<T_1 & Omit<Discord.TextBasedChannelFields, I>>;
    PartialWebhookMixin<T_2>(Base?: Discord.Constructable<T_2> | undefined): Discord.Constructable<T_2 & Discord.PartialWebhookFields>;
    WebhookMixin<T_3>(Base?: Discord.Constructable<T_3> | undefined): Discord.Constructable<T_3 & Discord.WebhookFields>;
    Collection: typeof Discord.Collection;
    Activity: typeof Discord.Activity;
    ActivityFlags: typeof Discord.ActivityFlags;
    AnonymousGuild: typeof Discord.AnonymousGuild;
    Application: typeof Discord.Application;
    ApplicationCommand: typeof Discord.ApplicationCommand;
    ApplicationFlags: typeof Discord.ApplicationFlags;
    Base: typeof Discord.Base;
    BaseClient: typeof Discord.BaseClient;
    BaseCommandInteraction: typeof Discord.BaseCommandInteraction;
    BaseGuild: typeof Discord.BaseGuild;
    BaseGuildEmoji: typeof Discord.BaseGuildEmoji;
    BaseGuildTextChannel: typeof Discord.BaseGuildTextChannel;
    BaseGuildVoiceChannel: typeof Discord.BaseGuildVoiceChannel;
    BaseMessageComponent: typeof Discord.BaseMessageComponent;
    BitField: typeof Discord.BitField;
    ButtonInteraction: typeof Discord.ButtonInteraction;
    CategoryChannel: typeof Discord.CategoryChannel;
    Channel: typeof Discord.Channel;
    ClientApplication: typeof Discord.ClientApplication;
    ClientUser: typeof Discord.ClientUser;
    Options: typeof Discord.Options;
    ClientVoiceManager: typeof Discord.ClientVoiceManager;
    Collector: typeof Discord.Collector;
    CommandInteraction: typeof Discord.CommandInteraction;
    CommandInteractionOptionResolver: typeof Discord.CommandInteractionOptionResolver;
    ContextMenuInteraction: typeof Discord.ContextMenuInteraction;
    DataResolver: typeof Discord.DataResolver;
    DiscordAPIError: typeof Discord.DiscordAPIError;
    DMChannel: typeof Discord.DMChannel;
    Emoji: typeof Discord.Emoji;
    Guild: typeof Discord.Guild;
    GuildAuditLogs: typeof Discord.GuildAuditLogs;
    GuildAuditLogsEntry: typeof Discord.GuildAuditLogsEntry;
    GuildBan: typeof Discord.GuildBan;
    GuildChannel: typeof Discord.GuildChannel;
    GuildEmoji: typeof Discord.GuildEmoji;
    GuildMember: typeof Discord.GuildMember;
    GuildPreview: typeof Discord.GuildPreview;
    GuildTemplate: typeof Discord.GuildTemplate;
    GuildPreviewEmoji: typeof Discord.GuildPreviewEmoji;
    HTTPError: typeof Discord.HTTPError;
    RateLimitError: typeof Discord.RateLimitError;
    Integration: typeof Discord.Integration;
    IntegrationApplication: typeof Discord.IntegrationApplication;
    Intents: typeof Discord.Intents;
    Interaction: typeof Discord.Interaction;
    InteractionCollector: typeof Discord.InteractionCollector;
    InteractionWebhook: typeof Discord.InteractionWebhook;
    Invite: typeof Discord.Invite;
    InviteStageInstance: typeof Discord.InviteStageInstance;
    InviteGuild: typeof Discord.InviteGuild;
    LimitedCollection: typeof Discord.LimitedCollection;
    Message: typeof Discord.Message;
    MessageActionRow: typeof Discord.MessageActionRow;
    MessageAttachment: typeof Discord.MessageAttachment;
    MessageButton: typeof Discord.MessageButton;
    MessageCollector: typeof Discord.MessageCollector;
    MessageComponentInteraction: typeof Discord.MessageComponentInteraction;
    MessageEmbed: typeof Discord.MessageEmbed;
    MessageFlags: typeof Discord.MessageFlags;
    MessageMentions: typeof Discord.MessageMentions;
    MessagePayload: typeof Discord.MessagePayload;
    MessageReaction: typeof Discord.MessageReaction;
    MessageSelectMenu: typeof Discord.MessageSelectMenu;
    NewsChannel: typeof Discord.NewsChannel;
    OAuth2Guild: typeof Discord.OAuth2Guild;
    PartialGroupDMChannel: typeof Discord.PartialGroupDMChannel;
    PermissionOverwrites: typeof Discord.PermissionOverwrites;
    Permissions: typeof Discord.Permissions;
    Presence: typeof Discord.Presence;
    ReactionCollector: typeof Discord.ReactionCollector;
    ReactionEmoji: typeof Discord.ReactionEmoji;
    RichPresenceAssets: typeof Discord.RichPresenceAssets;
    Role: typeof Discord.Role;
    SelectMenuInteraction: typeof Discord.SelectMenuInteraction;
    Shard: typeof Discord.Shard;
    ShardClientUtil: typeof Discord.ShardClientUtil;
    ShardingManager: typeof Discord.ShardingManager;
    SnowflakeUtil: typeof Discord.SnowflakeUtil;
    StageChannel: typeof Discord.StageChannel;
    StageInstance: typeof Discord.StageInstance;
    Sticker: typeof Discord.Sticker;
    StickerPack: typeof Discord.StickerPack;
    StoreChannel: typeof Discord.StoreChannel;
    SystemChannelFlags: typeof Discord.SystemChannelFlags;
    Team: typeof Discord.Team;
    TeamMember: typeof Discord.TeamMember;
    TextChannel: typeof Discord.TextChannel;
    ThreadChannel: typeof Discord.ThreadChannel;
    ThreadMember: typeof Discord.ThreadMember;
    ThreadMemberFlags: typeof Discord.ThreadMemberFlags;
    Typing: typeof Discord.Typing;
    User: typeof Discord.User;
    UserFlags: typeof Discord.UserFlags;
    Util: typeof Discord.Util;
    Formatters: typeof Discord.Formatters;
    VoiceChannel: typeof Discord.VoiceChannel;
    VoiceRegion: typeof Discord.VoiceRegion;
    VoiceState: typeof Discord.VoiceState;
    Webhook: typeof Discord.Webhook;
    WebhookClient: typeof Discord.WebhookClient;
    WebSocketManager: typeof Discord.WebSocketManager;
    WebSocketShard: typeof Discord.WebSocketShard;
    Widget: typeof Discord.Widget;
    WidgetMember: typeof Discord.WidgetMember;
    WelcomeChannel: typeof Discord.WelcomeChannel;
    WelcomeScreen: typeof Discord.WelcomeScreen;
    Constants: {
        Package: {
            [key: string]: unknown;
            name: string;
            version: string;
            description: string;
            author: string;
            license: string;
            main: string;
            types: string;
            homepage: string;
            keywords: string[];
            bugs: {
                url: string;
            };
            repository: {
                type: string;
                url: string;
            };
            scripts: Record<string, string>;
            engines: Record<string, string>;
            dependencies: Record<string, string>;
            peerDependencies: Record<string, string>;
            devDependencies: Record<string, string>;
        };
        UserAgent: string;
        Endpoints: {
            botGateway: string;
            invite: (root: string, code: string) => string;
            CDN: (root: string) => {
                Emoji: (emojiId: string, format: Discord.DynamicImageFormat) => string;
                Asset: (name: string) => string;
                DefaultAvatar: (discriminator: number) => string;
                Avatar: (userId: string, hash: string, format: Discord.DynamicImageFormat, size: Discord.AllowedImageSize, dynamic: boolean) => string;
                Banner: (guildId: string, hash: string, format: Discord.AllowedImageFormat, size: Discord.AllowedImageSize) => string;
                Icon: (guildId: string, hash: string, format: Discord.DynamicImageFormat, size: Discord.AllowedImageSize, dynamic: boolean) => string;
                AppIcon: (appId: string, hash: string, { format, size }: {
                    format: Discord.AllowedImageFormat;
                    size: Discord.AllowedImageSize;
                }) => string;
                AppAsset: (appId: string, hash: string, { format, size }: {
                    format: Discord.AllowedImageFormat;
                    size: Discord.AllowedImageSize;
                }) => string;
                StickerPackBanner: (bannerId: string, format: Discord.AllowedImageFormat, size: Discord.AllowedImageSize) => string;
                GDMIcon: (channelId: string, hash: string, format: Discord.AllowedImageFormat, size: Discord.AllowedImageSize) => string;
                Splash: (guildId: string, hash: string, format: Discord.AllowedImageFormat, size: Discord.AllowedImageSize) => string;
                DiscoverySplash: (guildId: string, hash: string, format: Discord.AllowedImageFormat, size: Discord.AllowedImageSize) => string;
                TeamIcon: (teamId: string, hash: string, { format, size }: {
                    format: Discord.AllowedImageFormat;
                    size: Discord.AllowedImageSize;
                }) => string;
                Sticker: (stickerId: string, stickerFormat: "PNG" | "APNG" | "LOTTIE") => string;
            };
        };
        WSCodes: {
            1000: "WS_CLOSE_REQUESTED";
            4004: "TOKEN_INVALID";
            4010: "SHARDING_INVALID";
            4011: "SHARDING_REQUIRED";
        };
        Events: Discord.ConstantsEvents;
        ShardEvents: Discord.ConstantsShardEvents;
        PartialTypes: {
            USER: "USER";
            CHANNEL: "CHANNEL";
            GUILD_MEMBER: "GUILD_MEMBER";
            MESSAGE: "MESSAGE";
            REACTION: "REACTION";
        };
        WSEvents: {
            READY: "READY";
            RESUMED: "RESUMED";
            APPLICATION_COMMAND_CREATE: "APPLICATION_COMMAND_CREATE";
            APPLICATION_COMMAND_DELETE: "APPLICATION_COMMAND_DELETE";
            APPLICATION_COMMAND_UPDATE: "APPLICATION_COMMAND_UPDATE";
            GUILD_CREATE: "GUILD_CREATE";
            GUILD_DELETE: "GUILD_DELETE";
            GUILD_UPDATE: "GUILD_UPDATE";
            INVITE_CREATE: "INVITE_CREATE";
            INVITE_DELETE: "INVITE_DELETE";
            GUILD_MEMBER_ADD: "GUILD_MEMBER_ADD";
            GUILD_MEMBER_REMOVE: "GUILD_MEMBER_REMOVE";
            GUILD_MEMBER_UPDATE: "GUILD_MEMBER_UPDATE";
            GUILD_MEMBERS_CHUNK: "GUILD_MEMBERS_CHUNK";
            GUILD_ROLE_CREATE: "GUILD_ROLE_CREATE";
            GUILD_ROLE_DELETE: "GUILD_ROLE_DELETE";
            GUILD_ROLE_UPDATE: "GUILD_ROLE_UPDATE";
            GUILD_BAN_ADD: "GUILD_BAN_ADD";
            GUILD_BAN_REMOVE: "GUILD_BAN_REMOVE";
            GUILD_EMOJIS_UPDATE: "GUILD_EMOJIS_UPDATE";
            GUILD_INTEGRATIONS_UPDATE: "GUILD_INTEGRATIONS_UPDATE";
            CHANNEL_CREATE: "CHANNEL_CREATE";
            CHANNEL_DELETE: "CHANNEL_DELETE";
            CHANNEL_UPDATE: "CHANNEL_UPDATE";
            CHANNEL_PINS_UPDATE: "CHANNEL_PINS_UPDATE";
            MESSAGE_CREATE: "MESSAGE_CREATE";
            MESSAGE_DELETE: "MESSAGE_DELETE";
            MESSAGE_UPDATE: "MESSAGE_UPDATE";
            MESSAGE_DELETE_BULK: "MESSAGE_DELETE_BULK";
            MESSAGE_REACTION_ADD: "MESSAGE_REACTION_ADD";
            MESSAGE_REACTION_REMOVE: "MESSAGE_REACTION_REMOVE";
            MESSAGE_REACTION_REMOVE_ALL: "MESSAGE_REACTION_REMOVE_ALL";
            MESSAGE_REACTION_REMOVE_EMOJI: "MESSAGE_REACTION_REMOVE_EMOJI";
            THREAD_CREATE: "THREAD_CREATE";
            THREAD_UPDATE: "THREAD_UPDATE";
            THREAD_DELETE: "THREAD_DELETE";
            THREAD_LIST_SYNC: "THREAD_LIST_SYNC";
            THREAD_MEMBER_UPDATE: "THREAD_MEMBER_UPDATE";
            THREAD_MEMBERS_UPDATE: "THREAD_MEMBERS_UPDATE";
            USER_UPDATE: "USER_UPDATE";
            PRESENCE_UPDATE: "PRESENCE_UPDATE";
            TYPING_START: "TYPING_START";
            VOICE_STATE_UPDATE: "VOICE_STATE_UPDATE";
            VOICE_SERVER_UPDATE: "VOICE_SERVER_UPDATE";
            WEBHOOKS_UPDATE: "WEBHOOKS_UPDATE";
            INTERACTION_CREATE: "INTERACTION_CREATE";
            STAGE_INSTANCE_CREATE: "STAGE_INSTANCE_CREATE";
            STAGE_INSTANCE_UPDATE: "STAGE_INSTANCE_UPDATE";
            STAGE_INSTANCE_DELETE: "STAGE_INSTANCE_DELETE";
            GUILD_STICKERS_UPDATE: "GUILD_STICKERS_UPDATE";
        };
        Colors: Discord.ConstantsColors;
        Status: Discord.ConstantsStatus;
        Opcodes: Discord.ConstantsOpcodes;
        APIErrors: Discord.APIErrors;
        ChannelTypes: typeof import("fosscord.js/typings/enums").ChannelTypes;
        ThreadChannelTypes: Discord.ThreadChannelTypes[];
        TextBasedChannelTypes: (Discord.ThreadChannelTypes | "DM" | "GUILD_TEXT" | "GUILD_NEWS")[];
        VoiceBasedChannelTypes: Discord.VoiceBasedChannelTypes[];
        ClientApplicationAssetTypes: Discord.ConstantsClientApplicationAssetTypes;
        InviteScopes: Discord.InviteScope[];
        MessageTypes: Discord.MessageType[];
        SystemMessageTypes: Discord.SystemMessageType[];
        ActivityTypes: typeof import("fosscord.js/typings/enums").ActivityTypes;
        StickerTypes: typeof import("fosscord.js/typings/enums").StickerTypes;
        StickerFormatTypes: typeof import("fosscord.js/typings/enums").StickerFormatTypes;
        OverwriteTypes: typeof import("fosscord.js/typings/enums").OverwriteTypes;
        ExplicitContentFilterLevels: typeof import("fosscord.js/typings/enums").ExplicitContentFilterLevels;
        DefaultMessageNotificationLevels: typeof import("fosscord.js/typings/enums").DefaultMessageNotificationLevels;
        VerificationLevels: typeof import("fosscord.js/typings/enums").VerificationLevels;
        MembershipStates: typeof import("fosscord.js/typings/enums").MembershipStates;
        ApplicationCommandOptionTypes: typeof import("fosscord.js/typings/enums").ApplicationCommandOptionTypes;
        ApplicationCommandPermissionTypes: typeof import("fosscord.js/typings/enums").ApplicationCommandPermissionTypes;
        InteractionTypes: typeof import("fosscord.js/typings/enums").InteractionTypes;
        InteractionResponseTypes: typeof import("fosscord.js/typings/enums").InteractionResponseTypes;
        MessageComponentTypes: typeof import("fosscord.js/typings/enums").MessageComponentTypes;
        MessageButtonStyles: typeof import("fosscord.js/typings/enums").MessageButtonStyles;
        MFALevels: typeof import("fosscord.js/typings/enums").MFALevels;
        NSFWLevels: typeof import("fosscord.js/typings/enums").NSFWLevels;
        PrivacyLevels: typeof import("fosscord.js/typings/enums").PrivacyLevels;
        WebhookTypes: typeof import("fosscord.js/typings/enums").WebhookTypes;
        PremiumTiers: typeof import("fosscord.js/typings/enums").PremiumTiers;
    };
    version: string;
    BaseManager: typeof Discord.BaseManager;
    DataManager: typeof Discord.DataManager;
    CachedManager: typeof Discord.CachedManager;
    ApplicationCommandManager: typeof Discord.ApplicationCommandManager;
    ApplicationCommandPermissionsManager: typeof Discord.ApplicationCommandPermissionsManager;
    BaseGuildEmojiManager: typeof Discord.BaseGuildEmojiManager;
    ChannelManager: typeof Discord.ChannelManager;
    GuildApplicationCommandManager: typeof Discord.GuildApplicationCommandManager;
    GuildChannelManager: typeof Discord.GuildChannelManager;
    GuildEmojiManager: typeof Discord.GuildEmojiManager;
    GuildEmojiRoleManager: typeof Discord.GuildEmojiRoleManager;
    GuildManager: typeof Discord.GuildManager;
    GuildMemberManager: typeof Discord.GuildMemberManager;
    GuildBanManager: typeof Discord.GuildBanManager;
    GuildInviteManager: typeof Discord.GuildInviteManager;
    GuildStickerManager: typeof Discord.GuildStickerManager;
    GuildMemberRoleManager: typeof Discord.GuildMemberRoleManager;
    MessageManager: typeof Discord.MessageManager;
    PermissionOverwriteManager: typeof Discord.PermissionOverwriteManager;
    PresenceManager: typeof Discord.PresenceManager;
    ReactionManager: typeof Discord.ReactionManager;
    ReactionUserManager: typeof Discord.ReactionUserManager;
    RoleManager: typeof Discord.RoleManager;
    StageInstanceManager: typeof Discord.StageInstanceManager;
    ThreadManager: typeof Discord.ThreadManager;
    ThreadMemberManager: typeof Discord.ThreadMemberManager;
    UserManager: typeof Discord.UserManager;
    VoiceStateManager: typeof Discord.VoiceStateManager;
};
export default _default;
